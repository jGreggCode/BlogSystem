DROP DATABASE IF EXISTS rantle_database;
CREATE DATABASE rantle_database;
USE rantle_database;

DROP TABLE IF EXISTS Users;
CREATE TABLE Users (
  userID INT AUTO_INCREMENT PRIMARY KEY,
  userUsername VARCHAR(20) UNIQUE NOT NULL,
  userEmail VARCHAR(100) UNIQUE NOT NULL,
  userPassword VARCHAR(500) NOT NULL,
  userProfilePicture VARCHAR(255),
  userBio TEXT,
  userIsAdmin BOOLEAN DEFAULT FALSE,
  userCreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  userUpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS Posts;
CREATE TABLE Posts (
  postID INT AUTO_INCREMENT PRIMARY KEY,
  postUserID INT,
  postContent TEXT NOT NULL,
  postCreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  postCpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  postIsDeleted BOOLEAN DEFAULT FALSE,
  FOREIGN KEY (postUserID) REFERENCES Users(userID)
);

DROP TABLE IF EXISTS Comments;
CREATE TABLE Comments (
  commentID INT AUTO_INCREMENT PRIMARY KEY,
  commentPostID INT,
  commentUserID INT,
  commentContent TEXT NOT NULL,
  commentCreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (commentPostID) REFERENCES Posts(postID),
  FOREIGN KEY (commentUserID) REFERENCES Users(userID)
);

DROP TABLE IF EXISTS Likes;
CREATE TABLE Likes (
  likeID INT AUTO_INCREMENT PRIMARY KEY,
  likePostID INT,
  likeUserID INT,
  likeCreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (likePostID) REFERENCES Posts(postID),
  FOREIGN KEY (likeUserID) REFERENCES Users(userID)
);

DROP TABLE IF EXISTS Friendships;
CREATE TABLE Friendships (
  userID1 INT,
  userID2 INT,
  friendshipStatus ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
  friendshipCreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  friendshipUpdated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (userID1, userID2),
  FOREIGN KEY (userID1) REFERENCES Users(userID),
  FOREIGN KEY (userID2) REFERENCES Users(userID)
);